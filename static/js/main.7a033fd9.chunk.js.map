{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priotityTitle","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","Fragment","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTask","newTaskTitle","todolistId","post","concat","createTodolist","getTodolists","get","updateTask","put","deleteTodolist","delete","getTasks","updateTodolistTitle","ADD_TASK","initialState","todolists","addTaskTC","dispatch","then","res","newTask","data","item","addTaskAC","setTodolistsAC","reducer","arguments","length","undefined","action","Object","objectSpread2","tl","toConsumableArray","newTodolist","filter","t","taskId","obj","console","log","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","loadTasks","addTask","newFilterValue","changeTask","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","newTasksTitileRef","createRef","ConnectedTodolist","connect","thunk","allTasks","items","setTasksAC","loadTasksThunkCreator","getState","find","forEach","updateTaskAC","updateTaskTC","deleteTodolistAC","deleteTodolistTC","deleteTaskAC","updateTodolistTitleAC","updateTodolistTitleTC","App","nextTodoListId","addTodoList","addTodolist","loadTodolists","___restoreState","getItem","parse","src_TodoList","ConnectedApp","todolist","addTodolistTC","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a033fd9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status == 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: {priotityTitle} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    render = () => {\n        return (\n            <>\n            {\n                this.state.editMode\n                    ? <input value={this.state.title} autoFocus={true} onBlur={this.deactivateEditMode} onChange={this.onTitleChanged}/>\n                    : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}\n                        <button onClick={this.props.onDelete}>X</button>\n                    </h3>\n            }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,                                       // передавай с запросом куки для запрашиваемого домена\r\n    headers: {\"API-KEY\": \"882dbad7-39ab-4897-86b8-be2cae193ef5\"} // специальный ключ в заголовках передаём\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n    },\r\n    updateTask(task) {\r\n        return instance.put(`/tasks`,  task);\r\n    },\r\n    deleteTodolist(id) {\r\n        return instance.delete(\"/\" + id)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`/tasks/${id}`)\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\n\r\nconst initialState = {\r\n    \"todolists\": [\r\n        /*{\r\n            \"id\": 0, \"title\": \"every day\",\r\n            tasks: [\r\n                {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n                {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n                {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n                {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n                {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n                {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        },\r\n        {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        {\"id\": 3, \"title\": \"dddd\", tasks: []}*/\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            }\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id != action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\nexport const updateTaskAC = (taskId, obj, todolistId) => {\r\n    return { type: UPDATE_TASK, taskId, obj, todolistId };\r\n}\r\nexport const deleteTodolistAC = (todolistId) => {\r\n    return {\r\n        type: DELETE_TODOLIST,\r\n        todolistId: todolistId\r\n    };\r\n}\r\nexport const deleteTaskAC = (todolistId, taskId) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        todolistId,\r\n        taskId\r\n    };\r\n}\r\nexport const updateTodolistTitleAC = (title, todolistId) => {\r\n    return {\r\n        type: UPDATE_TODOLIST_TITLE,\r\n        todolistId,\r\n        title\r\n    };\r\n}\r\n\r\nexport const updateTaskTC = (taskId, obj, todolistId) => {\r\n    return (dispatch, getState) => {\r\n        getState()\r\n            .todolists.find(tl => tl.id == todolistId)\r\n            .tasks.forEach(t => {\r\n            if (t.id === taskId) {\r\n                api.updateTask({...t, ...obj})\r\n                    .then(res => {\r\n                        dispatch(updateTaskAC(taskId, obj, todolistId));\r\n                    });\r\n            }\r\n        })\r\n    };\r\n}\r\nexport const updateTodolistTitleTC = (title, todolistId) => {\r\n    return (dispatch, getState) => {\r\n        api.updateTodolistTitle(title, todolistId)\r\n            .then(res => {\r\n                dispatch(updateTodolistTitleAC(title, todolistId));\r\n            });\r\n    };\r\n}\r\n\r\nconst addTaskAC = (newTask, todolistId) => {\r\n    return { type: ADD_TASK, newTask, todolistId };\r\n}\r\nexport const addTaskTC = (newText, todolistId) => {\r\n    return (dispatch) => {\r\n        api.createTask(newText, todolistId).then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todolistId));\r\n        });\r\n    };\r\n}\r\nconst setTasksAC = (tasks, todolistId) => {\r\n    return { type: SET_TASKS, tasks, todolistId };\r\n}\r\nexport const loadTasksThunkCreator = (todolistId) => {\r\n    return (dispatch) => {\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items;\r\n                dispatch(setTasksAC(allTasks, todolistId));\r\n            });\r\n    }\r\n}\r\n\r\nexport const loadTodolistsTC = () => {\r\n    return (dispatch) => {\r\n        api.getTodolists().then(res => {\r\n            dispatch(setTodolistsAC(res.data));\r\n        });\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (newTodolist) => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        newTodolist: newTodolist\r\n    }\r\n}\r\nexport const setTodolistsAC = (todolists) => {\r\n    return {\r\n        type: SET_TODOLISTS,\r\n        todolists: todolists\r\n    }\r\n}\r\nexport const addTodolistTC = (title) => {\r\n    return (dispatch) => {\r\n        api.createTodolist(title)\r\n            .then(res => {\r\n                let todolist = res.data.data.item;\r\n                dispatch(addTodolistAC(todolist));\r\n            });\r\n    }\r\n}\r\nexport const deleteTodolistTC= (todolistId) => {\r\n    return (dispatch) => {\r\n        api.deleteTodolist(todolistId)\r\n        .then(res => {\r\n           dispatch(deleteTodolistAC(todolistId));\r\n        });\r\n    }\r\n}\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskAC, addTaskTC,\n    deleteTaskAC,\n    deleteTodolistAC, deleteTodolistTC,\n    loadTasksThunkCreator,\n    updateTaskAC, updateTaskTC,\n    updateTodolistTitleAC, updateTodolistTitleTC\n} from \"./reducer\";\nimport axios from \"axios\";\nimport {api} from \"./api\";\n\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.loadTasks(this.props.id);\n    }\n\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText, this.props.id);\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    }\n\n    changeTask = (taskId, obj) => {\n        this.props.updateTask(taskId, obj, this.props.id);\n    }\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id);\n    }\n\n    deleteTask = (taskId) => {\n        api.deleteTask(taskId)\n            .then(res => {\n                // раз попали в then, значит\n                this.props.deleteTask(taskId, this.props.id);\n            });\n    }\n\n    updateTitle = (title) => {\n        this.props.updateTodolistTitle(title, this.props.id);\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n                <div className=\"todoList\">\n                    <div className=\"todoList-header\">\n                            <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist} updateTitle={this.updateTitle} />\n                            <AddNewItemForm addItem={this.addTask} />\n\n                    </div>\n\n                    <TodoListTasks changeStatus={this.changeStatus }\n                                   changeTitle={this.changeTitle }\n                                   deleteTask={this.deleteTask}\n                                   /*tasks={this.props.tasks.filter(t => {*/\n                                   tasks={tasks.filter(t => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask(newText, todolistId) {\n            dispatch(addTaskTC(newText, todolistId));\n        },\n        loadTasks(todolistId) {\n            let thunk = loadTasksThunkCreator(todolistId);\n            dispatch(thunk);\n        },\n        updateTask(taskId, obj, todolistId) {\n            const thunk =  updateTaskTC(taskId, obj, todolistId);\n            dispatch(thunk);\n        },\n        deleteTodolist: (todolistId) => {\n            const thunk = deleteTodolistTC(todolistId);\n            dispatch(thunk)\n        },\n        deleteTask: (taskId, todolistId) => {\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        updateTodolistTitle: (title, todolistId) => {\n            const action = updateTodolistTitleTC(title, todolistId);\n            dispatch(action)\n        }\n    }\n}\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {ADD_TODOLIST, addTodolistAC, addTodolistTC, loadTodolistsTC, setTodolistsAC} from \"./reducer\";\nimport axios from \"axios\";\nimport {api} from \"./api\";\n\nclass App extends React.Component {\n\n    nextTodoListId = 0;\n\n    state = {\n        todolists: []\n    }\n\n    addTodoList = (title) => {\n        this.props.addTodolist(title);\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.loadTodolists();\n    }\n\n\n    ___restoreState = () => {\n        // объявляем наш стейт стартовый\n        let state = this.state;\n        // считываем сохранённую ранее строку из localStorage\n        let stateAsString = localStorage.getItem(\"todolists-state\");\n        // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n        // если не null, тогда превращаем строку в объект\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n        this.setState(state, () => {\n            this.state.todolists.forEach(t => {\n                if (t.id >= this.nextTodoListId) {\n                    this.nextTodoListId = t.id + 1;\n                }\n            })\n        });\n    }\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>)\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadTodolists: () => {\n            const thunk = loadTodolistsTC();\n            dispatch(thunk);\n        },\n        addTodolist: (title) => {\n            const thunk = addTodolistTC(title);\n            dispatch(thunk);\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst store = createStore(reducer,\r\n    applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}